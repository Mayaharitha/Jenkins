Configuring a Jenkins Pipeline Job (Declarative Pipeline)
On the next page, scroll down to the Pipeline section and ensure that Pipeline Script is selected in the Definition drop-down. An input area should be visible. Copy the following body of text (which is basically in Groovy DSL format, a format understood by Jenkins) into the input area:

pipeline {
    agent {
        docker { image 'linuxacademycontent/jenkins_pipelines' }
    }
    stages {
        stage('fetch') {
            steps {
                sh 'git clone https://github.com/linuxacademy/content-pipelines-cje-labs.git'
            }
        }
        stage('build'){
            steps{
                sh 'gcc --std=c99 -o mario content-pipelines-cje-labs/lab1_lab2/mario.c'
            }
        }
        stage('archive'){
            steps{
                archiveArtifacts artifacts: 'mario'
            }
        }
    }
}
Leave everything else at the default settings and click on Save, which will take you to the control page for the job you just configured.

Running/Building Your Jenkins Declarative Pipeline Job
To kick off a build, click on Build Now. The build should start, and you should see a build number and a progress bar in the Build History box, on the left of your screen

Click on the build number under Build History (#1 for example), then select Console Output from the dropdown to watch the job's progress in real time.

Once that's finished running, click back on our pipeline's name (in the menu bar at the top of the screen). We'll see that all of our stages completed, and a mario artifact.

Conclusion
Congratulations on completing this hands-on lab!